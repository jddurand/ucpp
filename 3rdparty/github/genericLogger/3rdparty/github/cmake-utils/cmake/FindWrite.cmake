MACRO (FINDWRITE)
  GET_PROPERTY(source_dir_set GLOBAL PROPERTY MYPACKAGE_SOURCE_DIR SET)
  IF (NOT ${source_dir_set})
    MESSAGE (WARNING "Cannot check inline, property MYPACKAGE_SOURCE_DIR is not set")
  ELSE ()
    IF (NOT C_WRITE_SINGLETON)
      GET_PROPERTY(source_dir GLOBAL PROPERTY MYPACKAGE_SOURCE_DIR)
      SET (_C_WRITE_FOUND FALSE)
      #
      # We depend on unistd if available, stdio in any case
      #
      INCLUDE (CheckIncludeFile)
      CHECK_INCLUDE_FILE ("stdio.h" HAVE_STDIO_H)
      IF (HAVE_STDIO_H)
        SET (_HAVE_STDIO_H 1)
      ELSE ()
        SET (_HAVE_STDIO_H 0)
      ENDIF ()
      CHECK_INCLUDE_FILE ("unistd.h" HAVE_UNISTD_H)
      IF (HAVE_UNISTD_H)
        SET (_HAVE_UNISTD_H 1)
      ELSE ()
        SET (_HAVE_UNISTD_H 0)
      ENDIF ()
      #
      # Test
      #
      FOREACH (KEYWORD "write" "_write" "__write")
        MESSAGE(STATUS "Looking for ${KEYWORD}")
        TRY_COMPILE (C_HAS_${KEYWORD} ${CMAKE_CURRENT_BINARY_DIR}
          ${source_dir}/write.c
          COMPILE_DEFINITIONS "-DC_WRITE=${KEYWORD} -DHAVE_STDIO_H=${_HAVE_STDIO_H} -DHAVE_UNISTD_H=${_HAVE_UNISTD_H}")
        IF (C_HAS_${KEYWORD})
          MESSAGE(STATUS "Looking for ${KEYWORD} - found")
          SET (_C_WRITE ${KEYWORD})
          SET (_C_WRITE_FOUND TRUE)
          BREAK ()
        ENDIF ()
      ENDFOREACH ()
    ENDIF ()
    IF (_C_WRITE_FOUND)
      SET (C_WRITE "${_C_WRITE}" CACHE STRING "C write implementation")
      MARK_AS_ADVANCED (C_WRITE)
    ENDIF ()
    SET (C_WRITE_SINGLETON TRUE CACHE BOOL "C write check singleton")
    MARK_AS_ADVANCED (C_WRITE_SINGLETON)
  ENDIF ()
ENDMACRO()
